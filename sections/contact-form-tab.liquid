{{ 'section-contact-form.css' | asset_url | stylesheet_tag }}
<link rel="preload" as="style" href="{{ 'section-contact-form.css' | asset_url }}">
<script src='https://js.zohostatic.com.cn/support/app/js/jqueryandencoder.ef05974972bf3bca1b87.js'></script>
<script>function trimBoth(str) { return jQuery.trim(str); } function setAllDependancyFieldsMapping() { var mapDependancyLabels = getMapDependenySelectValues(jQuery("[id='property(module)']").val(), "JSON_MAP_DEP_LABELS"); if (mapDependancyLabels) { for (var i = 0; i < mapDependancyLabels.length; i++) { var label = mapDependancyLabels[i]; var obj = document.forms['zsWebToCase_7326000795433637'][label]; if (obj) { setDependent(obj, true); } } } } function getMapDependenySelectValues(module, key) { var dependencyObj = jQuery.parseJSON(jQuery("[id='dependent_field_values_" + module + "']").val()); if (dependencyObj == undefined) { return dependencyObj; } return dependencyObj[key]; } function setDependent(obj, isload) { var name = obj.id || (obj[0] && obj[0].id) || ""; var module = jQuery("[id='property(module)']").val(); var val = ""; var myObject = getMapDependenySelectValues(module, "JSON_VALUES"); if (myObject != undefined) { val = myObject[name]; } var mySelObject = getMapDependenySelectValues(module, "JSON_SELECT_VALUES"); if (val != null && val != "" && val != "null" && mySelObject) { var fields = val; for (var i in fields) { if (fields.hasOwnProperty(i)) { var isDependent = false; var label = i; var values = fields[i]; if (label.indexOf(")") > -1) { label = label.replace(/\)/g, '_____'); } if (label.indexOf("(") > -1) { label = label.replace(/\(/g, '____'); } if (label.indexOf(".") > -1) { label = label.replace(/\./g, '___'); } var depObj = document.forms['zsWebToCase_7326000795433637'][label]; if (depObj && depObj.options) { var mapValues = ""; var selected_val = depObj.value; var depLen = depObj.options.length - 1; for (var n = depLen; n >= 0; n--) { if (depObj.options[n].selected) { if (mapValues == "") { mapValues = depObj.options[n].value; } else { mapValues = mapValues + ";;;" + depObj.options[n].value; } } } depObj.value = ""; var selectValues = mySelObject[label]; for (var k in values) { var rat = k; if (rat == "-None-") { rat = ""; } var parentValues = mySelObject[name]; if (rat == trimBoth(obj.value)) { isDependent = true; depObj.length = 0; var depvalues = values[k]; var depLen = depvalues.length - 1; for (var j = 0; j <= depLen; j++) { var optionElement = document.createElement("OPTION"); var displayValue = depvalues[j]; var actualValue = displayValue; if (actualValue == "-None-") { optionElement.value = ""; displayValue = "-None-"; } else { optionElement.value = actualValue; } optionElement.text = displayValue; if (mapValues != undefined) { var mapValue = mapValues.split(";;;"); var len = mapValue.length; for (var p = 0; p < len; p++) { if (actualValue == mapValue[p]) { optionElement.selected = true; } } } depObj.options.add(optionElement); } } } if (!isDependent) { depObj.length = 0; var len = selectValues.length; for (var j = 0; j < len; j++) { var actualValue = selectValues[j]; var optionElement = document.createElement("OPTION"); if (actualValue == "-None-") { optionElement.value = ""; } else { optionElement.value = selectValues[j]; } optionElement.text = selectValues[j]; depObj.options.add(optionElement); } depObj.value = selected_val; } if (!isload) { setDependent(depObj, false); } var jdepObj = jQuery(depObj); if (jdepObj.hasClass('select2-offscreen')) { jdepObj.select2("val", jdepObj.val()); } } } } } } function setSelectAll(id) { var parentElement = document.getElementById(id); var hiddenInput = parentElement.querySelector('#hiddenoptions'); var selectAllElement = parentElement.querySelector('#selectall' + id); var selectedValues = []; var checkboxes = parentElement.querySelectorAll('.wb_multi_pick_input'); checkboxes.forEach(function (cb) { cb.checked = selectAllElement.checked; if (cb.checked && cb.value) { selectedValues.push(cb.value); } }); hiddenInput.value = selectedValues.join(','); } function setMultiSelectOption(id, obj) { var parentElement = document.getElementById(id); var hiddenInput = parentElement.querySelector('#hiddenoptions'); var selectAllElement = parentElement.querySelector('#selectall' + id); var selectedStr = hiddenInput.value; var selectedValues = selectedStr ? selectedStr.split(',') : []; if (obj.checked && obj.value) { selectedValues.push(obj.value); } else if (!obj.checked && obj.value) { selectedValues.splice(selectedValues.indexOf(obj.value), 1); selectAllElement.checked = false; } else { selectAllElement.checked = false; } hiddenInput.value = selectedValues.join(','); } var zctt = function () { var tt, mw = 400, top = 10, left = 0, doctt = document; var ieb = doctt.all ? true : false; return { showtt: function (cont, wid) { if (tt == null) { tt = doctt.createElement('div'); tt.setAttribute('id', 'tooltip-zc'); doctt.body.appendChild(tt); doctt.onmousemove = this.setpos; doctt.onclick = this.hidett; } tt.style.display = 'block'; tt.innerHTML = cont; tt.style.width = wid ? wid + 'px' : 'auto'; if (!wid && ieb) { tt.style.width = tt.offsetWidth; } if (tt.offsetWidth > mw) { tt.style.width = mw + 'px' } h = parseInt(tt.offsetHeight) + top; w = parseInt(tt.offsetWidth) + left; }, hidett: function () { tt.style.display = 'none'; }, setpos: function (e) { var u = ieb ? event.clientY + doctt.body.scrollTop : e.pageY; var l = ieb ? event.clientX + doctt.body.scrollLeft : e.pageX; var cw = doctt.body.clientWidth; var ch = doctt.body.clientHeight; if (l < 0) { tt.style.left = left + 'px'; tt.style.right = ''; } else if ((l + w + left) > cw) { tt.style.left = ''; tt.style.right = ((cw - l) + left) + 'px'; } else { tt.style.right = ''; tt.style.left = (l + left) + 'px'; } if (u < 0) { tt.style.top = top + 'px'; tt.style.bottom = ''; } else if ((u + h + left) > ch) { tt.style.top = ''; tt.style.bottom = ((ch - u) + top) + 'px'; } else { tt.style.bottom = ''; tt.style.top = (u + top) + 'px'; } } }; }(); var zsWebFormMandatoryFields = new Array("Contact Name", "Email", "Subject"); var zsFieldsDisplayLabelArray = new Array("Name", "Email", "Message"); function zsValidateMandatoryFields() { var name = ''; var email = ''; var isError = 0; for (var index = 0; index < zsWebFormMandatoryFields.length; index++) { isError = 0; var fieldObject = document.forms['zsWebToCase_7326000795433637'][zsWebFormMandatoryFields[index]]; if (fieldObject) { if (((fieldObject.value).replace(/^\s+|\s+$/g, '')).length == 0) { alert(zsFieldsDisplayLabelArray[index] + ' cannot be empty '); fieldObject.focus(); isError = 1; return false; } else { if (fieldObject.name == 'Email') { if (!fieldObject.value.match(/^([\w_][\w\-_.+\'&]*)@(?=.{4,256}$)(([\w]+)([\-_]*[\w])*[\.])+[a-zA-Z]{2,22}$/)) { isError = 1; alert('Enter a valid email-Id'); fieldObject.focus(); return false; } } } if (fieldObject.nodeName == 'SELECT') { if (fieldObject.options[fieldObject.selectedIndex].value == '-None-') { alert(zsFieldsDisplayLabelArray[index] + ' cannot be none'); fieldObject.focus(); isError = 1; return false; } } if (fieldObject.type == 'checkbox') { if (fieldObject.checked == false) { alert('Please accept ' + zsFieldsDisplayLabelArray[index]); fieldObject.focus(); isError = 1; return false; } } } } if (isError == 0) { if (document.forms['zsWebToCase_7326000795433637']['zsWebFormCaptchaWord'].value.replace(/^\s+|\s+$/g, '').length == 0) { alert('Please enter the captcha code.'); document.forms['zsWebToCase_7326000795433637']['zsWebFormCaptchaWord'].focus(); return false; } } if (isError == 0) { document.getElementById('zsSubmitButton_7326000795433637').setAttribute('disabled', 'disabled'); } } function zsShowCaptcha() { jQuery('#zsCaptchaLoading').hide(); jQuery('#zsCaptcha').show(); } function zsRegenerateCaptcha() { var webFormxhr = {}; webFormxhr = new XMLHttpRequest(); webFormxhr.open('GET', 'https://desk.zoho.com.cn/support/GenerateCaptcha?action=getNewCaptcha&_=' + new Date().getTime(), true); webFormxhr.onreadystatechange = function () { if (webFormxhr.readyState === 4 && webFormxhr.status === 200) { try { var response = (webFormxhr.responseText != null) ? JSON.parse(webFormxhr.responseText) : ''; jQuery('#zsCaptchaUrl').load(zsShowCaptcha); document.getElementById('zsCaptchaUrl').src = response.captchaUrl; document.getElementsByName('xJdfEaS')[0].value = response.captchaDigest; } catch (e) { } } }; webFormxhr.send(); } document.addEventListener('readystatechange', function () { if (document.readyState === 'complete' && window.zsRegenerateCaptcha) { zsRegenerateCaptcha(); } setAllDependancyFieldsMapping(); document.getElementById('zsSubmitButton_7326000795433637').removeAttribute('disabled'); zsAttachedAttachmentsCount = 0; zsAttachmentFileBrowserIdsList = [1, 2, 3, 4, 5]; document.forms['zsWebToCase_7326000795433637']['zsWebFormCaptchaWord'].value = ''; }); function zsResetWebForm(webFormId) { document.forms['zsWebToCase_' + webFormId].reset(); document.getElementById('zsSubmitButton_7326000795433637').removeAttribute('disabled'); setAllDependancyFieldsMapping(); } </script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tabItems = document.querySelectorAll('.contact-tab-item');
  const tabContents = document.querySelectorAll('.contact-tab-content');

  function switchTab(index) {
    // Remove active class from all tabs and contents
    tabItems.forEach(item => item.classList.remove('active'));
    tabContents.forEach(content => content.classList.remove('active'));

    // Add active class to selected tab and content
    tabItems[index].classList.add('active');
    tabContents[index].classList.add('active');
  }

  // Add click event listeners to tabs
  tabItems.forEach((tab, index) => {
    tab.addEventListener('click', () => switchTab(index));
  });
});
</script>

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="gradient section-{{ section.id }}-padding">
  <div class="container">
    <h1 class="main-page-title page-title main-page-title-contact h0{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
      {{ page.title | escape }}
    </h1>
    {% if section.settings.text != blank %}
      <div class="page__text rte">
        {{ section.settings.text }}
      </div>
    {% endif %}
    <div class="contact-tab-list">
      {% for block in section.blocks %}
        <div class="contact-tab-item {% if forloop.first %}active{% endif %}">{{ block.settings.tab_title }}</div>
      {% endfor %}
    </div>
    <div class=" contact-tab-contents">
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'page' %}
            <div class="contact-tab-content {% if forloop.first %}active{% endif %}">{{ page.content }}</div>
          {% when 'form' %}
            <div class="contact-tab-content {% if forloop.first %}active{% endif %}">
              <div class="contact ">
                <h2 class="title title-wrapper--no-top-margin inline-richtext {{ section.settings.heading_size }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                  {{ section.settings.heading }}
                </h2>
                {% render 'contact-zoho' %}
              </div>
            </div>
          {% when 'custom_content' %}
            <div class="contact-tab-content {% if forloop.first %}active{% endif %}">
              {{ block.settings.content }}
            </div>
        {% endcase %}
      {% endfor %}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Contact Form Tab",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "background-1"
    },
        {
        "type":"richtext",
        "id":"text",
        "label":"top text"
      },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "page",
      "name": "page content",
      "settings": [
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab Name"
        }
      ]
    },
    {
      "type":"form",
      "name":"Zoho Contact Form",
      "settings":[
         {
          "type": "text",
          "id": "tab_title",
          "label": "Tab Name"
        },
        {
          "type": "header",
          "content": "Form"
        },
        {
      "type": "inline_richtext",
      "id": "heading",
      "default": "Contact form",
      "label": "Heading"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    }

      ]
    },
    {
      "type":"custom_content",
      "name":"Custom Content",
      "settings":[
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab Name"
        },
        {
          "type":"richtext",
          "id":"content",
          "label":"content"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Contact Form Tab"
    }
  ]
}
{% endschema %}
